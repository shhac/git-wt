#!/usr/bin/expect -f

# Test removal of prunable (missing) worktrees
# This test verifies that gwt rm can clean up worktrees whose directories are missing

set timeout 5
set test_failed 0

proc test_failed {msg} {
    global test_failed
    puts "\n!!! TEST FAILED: $msg !!!"
    set test_failed 1
}

# Setup
puts "\n=== Setting up test repository ==="
system "rm -rf /tmp/test-prunable /tmp/test-prunable-trees 2>/dev/null"
system "mkdir -p /tmp/test-prunable"
cd /tmp/test-prunable
system "git init -q"
system "git config user.email 'test@test.com'"
system "git config user.name 'Test User'"
system "echo 'initial' > README.md"
system "git add . && git commit -q -m 'initial'"

set git_wt "/Users/paul/projects-personal/git-wt/zig-out/bin/git-wt"

# Create test worktrees
puts "\n=== Creating test worktrees ==="
system "$git_wt new will-be-prunable-1 --non-interactive"
system "$git_wt new will-be-prunable-2 --non-interactive"
system "$git_wt new keep-normal --non-interactive"

# Make worktrees prunable by deleting their directories
puts "\n=== Making worktrees prunable by removing directories ==="
system "rm -rf ../test-prunable-trees/will-be-prunable-1"
system "rm -rf ../test-prunable-trees/will-be-prunable-2"

# Verify they show as prunable
puts "\n=== Verifying prunable status ==="
spawn git worktree list
expect {
    "*prunable*" {
        puts "✓ Worktrees marked as prunable after directory removal"
    }
    eof {
        test_failed "Worktrees not marked as prunable"
    }
    timeout {
        test_failed "git worktree list timed out"
    }
}
catch {close}
catch {wait}

# List worktrees with git-wt to see prunable status
puts "\n=== Test 1: List shows prunable worktrees ==="
spawn $git_wt list

expect {
    "*missing (prunable)*" {
        puts "✓ git-wt list shows prunable status"
    }
    timeout {
        test_failed "git-wt list didn't show prunable status"
    }
}
catch {close}
catch {wait}

# Test 2: Remove single prunable worktree
puts "\n=== Test 2: Remove single prunable worktree ==="
spawn $git_wt rm will-be-prunable-1 --non-interactive

expect {
    "*Worktree removed successfully*" {
        puts "✓ Successfully removed prunable worktree will-be-prunable-1"
    }
    "*Error*" {
        test_failed "Error removing prunable worktree"
    }
    timeout {
        test_failed "Removal of prunable worktree timed out"
    }
}
catch {close}
catch {wait}

# Verify it was removed
spawn git worktree list
expect {
    "*will-be-prunable-1*" {
        test_failed "will-be-prunable-1 still exists after removal"
    }
    eof {
        puts "✓ will-be-prunable-1 no longer in worktree list"
    }
    timeout {
        puts "Note: git worktree list completed"
    }
}
catch {close}
catch {wait}

# Test 3: Interactive removal of prunable worktree
puts "\n=== Test 3: Interactive removal of remaining prunable worktree ==="
spawn $git_wt rm

expect {
    "*Select worktree*" {
        puts ">>> Selecting prunable worktree..."
        
        # Navigate to prunable worktree
        send "\033\[B"
        sleep 0.1
        
        # Select it with space
        send " "
        sleep 0.1
        
        # Confirm with Enter
        send "\r"
        
        expect {
            "*Are you sure*" {
                puts ">>> Confirming removal..."
                send "y\r"
                
                expect {
                    "*removed*" {
                        puts "✓ Interactive removal of prunable worktree succeeded"
                    }
                    timeout {
                        puts "Warning: Removal result unclear"
                    }
                }
            }
            timeout {
                puts "Warning: No confirmation prompt"
            }
        }
    }
    "*Enter numbers*" {
        puts "Note: Using number mode"
        
        # Select the prunable worktree
        send "1\r"
        
        expect {
            "*Are you sure*" {
                send "y\r"
                puts "✓ Number mode removal completed"
            }
            timeout {
                puts "Warning: Number mode unclear"
            }
        }
    }
    timeout {
        test_failed "Interactive UI did not appear"
    }
}
catch {close}
catch {wait}

# Test 4: Verify all prunable worktrees are gone
puts "\n=== Test 4: Verify cleanup ==="
spawn git worktree list

set output ""
expect {
    -re ".+" {
        append output $expect_out(buffer)
        exp_continue
    }
    eof {
        # Check the output
        if {[string match "*will-be-prunable*" $output]} {
            test_failed "Prunable worktrees still exist"
        } else {
            puts "✓ All prunable worktrees have been cleaned up"
        }
        
        if {[string match "*keep-normal*" $output]} {
            puts "✓ Normal worktree was preserved"
        } else {
            puts "Warning: Normal worktree not found (may have been removed manually)"
        }
    }
}
catch {close}
catch {wait}

# Cleanup
puts "\n=== Cleanup ==="
cd /Users/paul/projects-personal/git-wt
system "rm -rf /tmp/test-prunable /tmp/test-prunable-trees"

# Report
puts "\n=== TEST RESULTS ==="
if {$test_failed == 0} {
    puts "✅ ALL PRUNABLE WORKTREE TESTS PASSED"
    exit 0
} else {
    puts "❌ SOME TESTS FAILED"
    exit 1
}