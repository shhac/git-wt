#!/usr/bin/expect -f

# Enhanced expect script that captures screen content on timeout
set timeout 2

proc capture_screen {msg} {
    global expect_out
    puts "\n=== $msg ==="
    puts "=== SCREEN CAPTURE START ==="
    
    # The expect_out(buffer) contains everything received since last expect
    if {[info exists expect_out(buffer)]} {
        puts $expect_out(buffer)
    } else {
        puts "(No buffer content available)"
    }
    
    puts "=== SCREEN CAPTURE END ==="
}

# Test 1: git-wt go interactive mode
puts "\n=== Testing git-wt go interactive mode ==="
spawn ./zig-out/bin/git-wt go

expect {
    "*Navigate*Select*" {
        capture_screen "Arrow-key UI detected"
        
        # Try to send arrow key
        send "\033\[B"
        
        # Wait a bit to see if screen updates
        expect {
            timeout {
                capture_screen "After sending arrow down"
            }
        }
    }
    "*Enter number*" {
        capture_screen "Number-based UI detected"
        send "1\r"
    }
    timeout {
        capture_screen "Timeout - captured screen state"
    }
}

# Clean up
catch {close}
catch {wait}

# Test 2: git-wt rm multi-select mode
puts "\n\n=== Testing git-wt rm multi-select mode ==="
spawn ./zig-out/bin/git-wt rm

expect {
    "*Select worktree*" {
        capture_screen "Multi-select UI detected"
        
        # Try to toggle selection with space
        send " "
        
        # Wait to see screen update
        expect {
            "*\\\[X\\\]*" {
                capture_screen "After space - item selected"
                send "\r"
            }
            timeout {
                capture_screen "After space - timeout"
            }
        }
    }
    "*Enter numbers*" {
        capture_screen "Number-based rm mode"
        send "1\r"
    }
    timeout {
        capture_screen "Timeout in rm - captured screen"
    }
}

# Clean up
catch {close}
catch {wait}

puts "\n=== Tests complete ===\n"